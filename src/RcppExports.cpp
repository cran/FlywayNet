// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// estimate_migration_MCEM_C
Rcpp::List estimate_migration_MCEM_C(Rcpp::List migration, Rcpp::Nullable<bool> estimate_transitions, Rcpp::Nullable<Rcpp::LogicalVector> estimate_sojourns, Rcpp::Nullable<Rcpp::List> sojourn_domain, Rcpp::Nullable<Rcpp::NumericMatrix> start_transitions, Rcpp::Nullable<Rcpp::NumericVector> start_sojourns, Rcpp::Nullable<int> nb_particles, Rcpp::Nullable<int> itermax, Rcpp::Nullable<Rcpp::String> MC_algo, Rcpp::Nullable<double> MH_neighborhood, Rcpp::Nullable<int> MH_transition_length, Rcpp::Nullable<bool> log_transitions, Rcpp::Nullable<bool> log_sojourns, Rcpp::Nullable<bool> log_loglikelihood, Rcpp::Nullable<bool> log_sel_particles, Rcpp::Nullable<bool> log_acceptance_rate, Rcpp::Nullable<bool> verbose);
RcppExport SEXP _FlywayNet_estimate_migration_MCEM_C(SEXP migrationSEXP, SEXP estimate_transitionsSEXP, SEXP estimate_sojournsSEXP, SEXP sojourn_domainSEXP, SEXP start_transitionsSEXP, SEXP start_sojournsSEXP, SEXP nb_particlesSEXP, SEXP itermaxSEXP, SEXP MC_algoSEXP, SEXP MH_neighborhoodSEXP, SEXP MH_transition_lengthSEXP, SEXP log_transitionsSEXP, SEXP log_sojournsSEXP, SEXP log_loglikelihoodSEXP, SEXP log_sel_particlesSEXP, SEXP log_acceptance_rateSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type migration(migrationSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type estimate_transitions(estimate_transitionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::LogicalVector> >::type estimate_sojourns(estimate_sojournsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type sojourn_domain(sojourn_domainSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type start_transitions(start_transitionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type start_sojourns(start_sojournsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<int> >::type nb_particles(nb_particlesSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<int> >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::String> >::type MC_algo(MC_algoSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type MH_neighborhood(MH_neighborhoodSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<int> >::type MH_transition_length(MH_transition_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type log_transitions(log_transitionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type log_sojourns(log_sojournsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type log_loglikelihood(log_loglikelihoodSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type log_sel_particles(log_sel_particlesSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type log_acceptance_rate(log_acceptance_rateSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_migration_MCEM_C(migration, estimate_transitions, estimate_sojourns, sojourn_domain, start_transitions, start_sojourns, nb_particles, itermax, MC_algo, MH_neighborhood, MH_transition_length, log_transitions, log_sojourns, log_loglikelihood, log_sel_particles, log_acceptance_rate, verbose));
    return rcpp_result_gen;
END_RCPP
}
// estimate_migration_from_trajectories_C
Rcpp::List estimate_migration_from_trajectories_C(Rcpp::List migration, Rcpp::NumericMatrix trajectories, Rcpp::Nullable<bool> estimate_transitions, Rcpp::Nullable<Rcpp::LogicalVector> estimate_sojourns, Rcpp::Nullable<Rcpp::List> sojourn_domain, Rcpp::Nullable<double> min_prob);
RcppExport SEXP _FlywayNet_estimate_migration_from_trajectories_C(SEXP migrationSEXP, SEXP trajectoriesSEXP, SEXP estimate_transitionsSEXP, SEXP estimate_sojournsSEXP, SEXP sojourn_domainSEXP, SEXP min_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type migration(migrationSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type trajectories(trajectoriesSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type estimate_transitions(estimate_transitionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::LogicalVector> >::type estimate_sojourns(estimate_sojournsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type sojourn_domain(sojourn_domainSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type min_prob(min_probSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_migration_from_trajectories_C(migration, trajectories, estimate_transitions, estimate_sojourns, sojourn_domain, min_prob));
    return rcpp_result_gen;
END_RCPP
}
// generate_trajectories_C
Rcpp::NumericMatrix generate_trajectories_C(Rcpp::List migration, Rcpp::Nullable<Rcpp::NumericMatrix> trajectory, Rcpp::Nullable<int> end_time);
RcppExport SEXP _FlywayNet_generate_trajectories_C(SEXP migrationSEXP, SEXP trajectorySEXP, SEXP end_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type migration(migrationSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type trajectory(trajectorySEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<int> >::type end_time(end_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_trajectories_C(migration, trajectory, end_time));
    return rcpp_result_gen;
END_RCPP
}
// get_counts_C
Rcpp::NumericMatrix get_counts_C(Rcpp::List migration, Rcpp::NumericMatrix trajs);
RcppExport SEXP _FlywayNet_get_counts_C(SEXP migrationSEXP, SEXP trajsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type migration(migrationSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type trajs(trajsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_counts_C(migration, trajs));
    return rcpp_result_gen;
END_RCPP
}
// get_observation_probability_C
double get_observation_probability_C(const Rcpp::NumericMatrix& obs, const Rcpp::NumericMatrix& hidden_count, bool use_log);
RcppExport SEXP _FlywayNet_get_observation_probability_C(SEXP obsSEXP, SEXP hidden_countSEXP, SEXP use_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type hidden_count(hidden_countSEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    rcpp_result_gen = Rcpp::wrap(get_observation_probability_C(obs, hidden_count, use_log));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FlywayNet_estimate_migration_MCEM_C", (DL_FUNC) &_FlywayNet_estimate_migration_MCEM_C, 17},
    {"_FlywayNet_estimate_migration_from_trajectories_C", (DL_FUNC) &_FlywayNet_estimate_migration_from_trajectories_C, 6},
    {"_FlywayNet_generate_trajectories_C", (DL_FUNC) &_FlywayNet_generate_trajectories_C, 3},
    {"_FlywayNet_get_counts_C", (DL_FUNC) &_FlywayNet_get_counts_C, 2},
    {"_FlywayNet_get_observation_probability_C", (DL_FUNC) &_FlywayNet_get_observation_probability_C, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_FlywayNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
